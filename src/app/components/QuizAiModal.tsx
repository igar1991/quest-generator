"use client";

import React, { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/app/components/ui/Dialog";
import { Input } from "@/app/components/ui/Input";
import { Slider } from "@/app/components/ui/Slider";

// Fix Button import issue
const Button = ({
  children,
  variant,
  onClick,
  disabled,
  className,
}: {
  children: React.ReactNode;
  variant?: "outline" | "primary";
  onClick?: () => void;
  disabled?: boolean;
  className?: string;
}) => {
  const baseClass = "px-4 py-2 rounded-md font-medium transition-colors";
  const variantClass =
    variant === "outline"
      ? "border border-gray-300 hover:bg-gray-100 text-gray-700"
      : "bg-blue-600 text-white hover:bg-blue-700";

  return (
    <button
      className={`${baseClass} ${variantClass} ${className || ""} ${disabled ? "opacity-50 cursor-not-allowed" : ""}`}
      onClick={onClick}
      disabled={disabled}
    >
      {children}
    </button>
  );
};

/**
 * Props for the QuizAiModal component
 */
interface QuizAiModalProps {
  /**
   * Whether the modal is open
   */
  open: boolean;

  /**
   * Function to call when the open state changes
   */
  onOpenChange: (open: boolean) => void;

  /**
   * Function to call when quiz questions are generated
   */
  onQuestionsGenerated: (questions: QuizQuestion[]) => void;
}

/**
 * Quiz question generated by AI
 */
export interface QuizQuestion {
  /**
   * Unique identifier for the question
   */
  id: string;

  /**
   * Question type (always "quiz" for AI-generated questions)
   */
  type: "quiz";

  /**
   * Title of the quiz question
   */
  title: string;

  /**
   * Description or context for the question
   */
  description: string;

  /**
   * The question to be answered
   */
  question: string;

  /**
   * Available answer options
   */
  options: string[];

  /**
   * The correct answer (should match one of the options)
   */
  correctAnswer: string;
}

/**
 * Modal component for generating quiz questions with AI
 */
export function QuizAiModal({
  open,
  onOpenChange,
  onQuestionsGenerated,
}: QuizAiModalProps) {
  // Form state
  const [topic, setTopic] = useState<string>("");
  const [questionsCount, setQuestionsCount] = useState<number>(3);

  // Loading state
  const [isGenerating, setIsGenerating] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  /**
   * Generate quiz questions using the AI endpoint
   */
  const handleGenerate = async () => {
    if (!topic.trim()) {
      setError("Please enter a topic");
      return;
    }

    setError(null);
    setIsGenerating(true);

    try {
      const response = await fetch("/api/generate-quiz", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          topic,
          count: questionsCount,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to generate quiz questions");
      }

      const data = await response.json();
      onQuestionsGenerated(data.questions);
      onOpenChange(false);
    } catch (error) {
      console.error("Error generating quiz questions:", error);
      setError(
        error instanceof Error ? error.message : "An unknown error occurred",
      );
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[525px]">
        <DialogHeader>
          <DialogTitle>Generate Quiz with AI</DialogTitle>
          <DialogDescription>
            Create quiz questions about a specific topic using AI
          </DialogDescription>
        </DialogHeader>

        <div className="grid gap-4 py-4">
          {error && (
            <div className="p-3 text-sm bg-red-50 border border-red-200 text-red-600 rounded-md">
              {error}
            </div>
          )}

          <div className="grid gap-2">
            <label htmlFor="topic" className="text-sm font-medium">
              Topic <span className="text-red-500">*</span>
            </label>
            <Input
              id="topic"
              value={topic}
              onChange={(e) => setTopic(e.target.value)}
              placeholder="Enter a topic (e.g., JavaScript basics, blockchain technology)"
              className="col-span-3"
              disabled={isGenerating}
            />
          </div>

          <div className="grid gap-2">
            <label htmlFor="questionsCount" className="text-sm font-medium">
              Number of questions: {questionsCount}
            </label>
            <div className="px-1">
              <Slider
                id="questionsCount"
                defaultValue={[questionsCount]}
                min={1}
                max={20}
                step={1}
                onValueChange={(values) => setQuestionsCount(values[0])}
                disabled={isGenerating}
              />
              <div className="flex justify-between text-xs text-gray-500 mt-1">
                <span>1</span>
                <span>10</span>
                <span>20</span>
              </div>
            </div>
          </div>
        </div>

        <DialogFooter>
          <Button
            variant="outline"
            onClick={() => onOpenChange(false)}
            disabled={isGenerating}
          >
            Cancel
          </Button>
          <Button
            onClick={handleGenerate}
            disabled={!topic.trim() || isGenerating}
          >
            {isGenerating ? "Generating..." : "Generate Questions"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
